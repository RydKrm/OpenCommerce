version: "3.9"

services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    ports:
      - "5431:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5

  # ----------------- MIGRATION JOBS -----------------
  migrate_users:
    build:
      context: ./users_services
    command: npx prisma migrate dev
    environment:
      - DATABASE_URL=postgresql://postgres:1234@postgres:5432/ecommerce-users?schema=public
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  migrate_products:
    build:
      context: ./product_services
    command: npx prisma migrate dev
    environment:
      - DATABASE_URL=postgresql://postgres:1234@postgres:5432/ecommerce-products?schema=public
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  migrate_orders:
    build:
      context: ./order_services
    command: npx prisma migrate dev
    environment:
      - DATABASE_URL=postgresql://postgres:1234@postgres:5432/ecommerce-orders?schema=public
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  # ----------------- SERVICES -----------------
  user_service:
    build:
      context: ./users_services
    ports:
      - "3001:3001"
    volumes:
      - ./users_services:/app
      - /app/node_modules
    environment:
      - DATABASE_URL=postgresql://postgres:1234@postgres:5432/ecommerce-users?schema=public
      - ACCESS_TOKEN_SECRET_KEY=ecommerce_access_token
      - PORT=3001
    depends_on:
      - migrate_users
    command: npm run dev
    networks:
      - backend

  product_service:
    build:
      context: ./product_services
    ports:
      - "3000:3000"
    volumes:
      - ./product_services:/app
      - /app/node_modules
    environment:
      - DATABASE_URL=postgresql://postgres:1234@postgres:5432/ecommerce-products?schema=public
      - ACCESS_TOKEN_SECRET_KEY=ecommerce_access_token
      - PORT=3000
      - GRPC_SERVER_URL=product_service
      - GRPC_PORT=50051
    depends_on:
      - migrate_products
    command: npm run dev
    networks:
      - backend

  order_service:
    build:
      context: ./order_services
    ports:
      - "3002:3002"
    volumes:
      - ./order_services:/app
      - /app/node_modules
    environment:
      - DATABASE_URL=postgresql://postgres:1234@postgres:5432/ecommerce-orders?schema=public
      - ACCESS_TOKEN_SECRET_KEY=ecommerce_access_token
      - PORT=3002
    depends_on:
      - migrate_orders
    command: npm run dev
    networks:
      - backend

  file_storage_service:
    build:
      context: ./file_storage_services
    ports:
      - "3004:3004"
    volumes:
      - ./file_storage_services:/app
      - /app/node_modules
    environment:
      - ACCESS_TOKEN_SECRET_KEY=ecommerce_access_token
    networks:
      - backend

  api_gateway:
    build:
      context: ./api_gateway
    ports:
      - "8081:8081"
    volumes:
      - ./api_gateway:/app
      - /app/node_modules
    environment:
      - ACCESS_TOKEN_SECRET_KEY=ecommerce_access_token
      - FILE_SERVER_URL=http://file_storage_service:3004
      - USER_SERVICE_URL=http://user_service:3001
      - PRODUCT_SERVICE_URL=http://product_service:3000
      - ORDER_SERVICE_URL=http://order_service:3002
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: user
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - backend

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    ports:
      - "6378:8001"
    depends_on:
      - redis

# ----------------- VOLUMES -----------------
volumes:
  pgdata:
  rabbitmq_data:
  redis_data:

# ----------------- NETWORK -----------------
networks:
  backend:
    driver: bridge
